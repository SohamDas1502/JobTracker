// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  
  // Job applications created by this user
  jobApplications JobApplication[]
  
  // User preferences
  preferences UserPreferences?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Job application status enum
enum ApplicationStatus {
  APPLIED
  PHONE_SCREENING
  TECHNICAL_INTERVIEW
  ONSITE_INTERVIEW
  FINAL_INTERVIEW
  OFFER
  REJECTED
  WITHDRAWN
}

// Job application priority enum
enum Priority {
  LOW
  MEDIUM
  HIGH
}

// Job type enum
enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
  FREELANCE
}

// Work location enum
enum WorkLocation {
  REMOTE
  ONSITE
  HYBRID
}

// Main job application model
model JobApplication {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic job information
  company     String
  position    String
  location    String?
  jobUrl      String?
  salary      String?
  jobType     JobType?
  workLocation WorkLocation?
  
  // Application status and tracking
  status      ApplicationStatus @default(APPLIED)
  priority    Priority         @default(MEDIUM)
  appliedDate DateTime         @default(now())
  deadline    DateTime?
  
  // Additional information
  description String?
  requirements String?
  notes       String?
  
  // Contact information
  contactName  String?
  contactEmail String?
  contactPhone String?
  
  // File attachments
  documents   Document[]
  
  // Timeline events
  events      ApplicationEvent[]
  
  // Reminders
  reminders   Reminder[]
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("job_applications")
}

// Document model for file uploads (resume, cover letter, etc.)
model Document {
  id               String         @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  
  name        String
  type        String // "resume", "cover_letter", "portfolio", "other"
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("documents")
}

// Application event model for tracking timeline
model ApplicationEvent {
  id               String         @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  eventDate   DateTime
  eventType   String          // "status_change", "interview", "follow_up", "note", "other"
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("application_events")
}

// Reminder model for notifications
model Reminder {
  id               String         @id @default(cuid())
  jobApplicationId String
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  remindAt    DateTime
  isCompleted Boolean         @default(false)
  reminderType String         // "follow_up", "interview", "deadline", "other"
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("reminders")
}

// User preferences model for storing default settings
model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Default application status when creating new applications
  defaultStatus ApplicationStatus @default(APPLIED)
  
  // Default number of days for follow-up reminders
  defaultFollowUpDays Int @default(7)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

// Password reset tokens
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}
